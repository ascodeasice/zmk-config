/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

// make moving faster

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

/* Layers */

#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3
#define MED_L 4

/* Shortcuts */

#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define SLALL LC(A)

/* Key Position Groups */

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22  // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 23 24 25  // right-hand keys
#define THUMBS 26 27 28 29                        // thumb keys

/* Mod Tap Parameters */

#define TAPPING_TERM 200
#define TD_TAPPING_TERM 325
#define QUICK_TAP_TERM 175

/* Behavior Settings */

&sk {
    release-after-ms = <250>;
    quick-release;
};

&sl { release-after-ms = <250>; };

&mt {
    tapping-term-ms = <TAPPING_TERM>;
    flavor = "tap-preferred";
    quick-tap-ms = <QUICK_TAP_TERM>;
};

/ {
    behaviors {
        f1to3: f1to3 {
            compatible = "zmk,behavior-tap-dance";
            label = "F1TO3";
            #binding-cells = <0>;
            bindings = <&kp F1>, <&kp F2>, <&kp F3>;
        };

        f4to6: f4to6 {
            compatible = "zmk,behavior-tap-dance";
            label = "F4TO6";
            #binding-cells = <0>;
            bindings = <&kp F4>, <&kp F5>, <&kp F6>;
        };

        f7to9: f7to9 {
            compatible = "zmk,behavior-tap-dance";
            label = "F7TO9";
            #binding-cells = <0>;
            bindings = <&kp F7>, <&kp F8>, <&kp F9>;
        };

        shift_or_cap: shift_or_cap {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_OR_CAP";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;
        };

        index_i_j_k: index_i_j_k {
            compatible = "zmk,behavior-tap-dance";
            label = "INDEX_I_J_K";
            #binding-cells = <0>;
            bindings = <&index_i>, <&index_j>, <&index_k>;
        };

        index_0_1_2: index_0_1_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "INDEX_0_1_2";
            #binding-cells = <0>;
            bindings = <&index0>, <&index1>, <&index_2>;
        };

        swap_quote: swap_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "SWAP_QUOTE";
            bindings = <&kp DOUBLE_QUOTES>, <&kp SINGLE_QUOTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ctrl_m_to_enter: ctrl_m_to_enter {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_M_TO_ENTER";
            bindings = <&kp M>, <&kp ENTER>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */
        /* Letters */

        v {
            key-positions = <2 3>;
            bindings = <&kp V>;
            layers = <0>;
        };

        q {
            key-positions = <12 11>;
            bindings = <&kp Q>;
            layers = <0>;
        };

        z {
            key-positions = <2 13>;
            bindings = <&kp Z>;
            layers = <0>;
        };

        /* Brackets */
        /* Convenience */

        esc {
            bindings = <&kp ESC>;
            key-positions = <11 13>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <12 22>;
            layers = <0>;
        };

        zero {
            bindings = <&kp N0>;
            key-positions = <20 21>;
            layers = <0 3>;
            timeout-ms = <30>;
        };

        one {
            bindings = <&kp N1>;
            key-positions = <22 21>;
            layers = <0 3>;
            timeout-ms = <25>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <24 25>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <23 24>;
            layers = <0>;
        };

        quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <17 18>;
            layers = <0>;
            timeout-ms = <25>;
        };

        to_nav {
            bindings = <&to 2>;
            key-positions = <24 25 23>;
            layers = <0>;
        };

        var_text {
            bindings = <&var_text>;
            key-positions = <8 18>;
            layers = <0>;
        };

        two {
            bindings = <&kp NUMBER_2>;
            key-positions = <20 22>;
            layers = <0 3>;
            timeout-ms = <30>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms = <25>;
        };

        key {
            bindings = <&key>;
            key-positions = <3 13>;
            layers = <0>;
        };

        language_switch {
            bindings = <&language_switch>;
            key-positions = <7 8>;
            timeout-ms = <30>;
            layers = <0>;
        };

        home_dir {
            bindings = <&home_dir>;
            key-positions = <1 3>;
            layers = <0>;
        };

        astrk {
            bindings = <&kp ASTRK>;
            key-positions = <25 23>;
            layers = <0>;
        };

        less {
            bindings = <&less>;
            key-positions = <1 2>;
            layers = <3>;
        };

        gt {
            bindings = <&gt>;
            key-positions = <2 3>;
            layers = <3>;
        };

        arrow {
            bindings = <&arrow>;
            key-positions = <11 12>;
            layers = <3>;
        };

        last_dir {
            bindings = <&last_dir>;
            key-positions = <1 11>;
            layers = <0>;
        };

        line_start {
            bindings = <&kp CARET>;
            key-positions = <16 23>;
            layers = <0>;
        };

        line_end {
            bindings = <&kp DOLLAR>;
            key-positions = <17 24>;
            layers = <0>;
        };

        exclamation {
            bindings = <&kp EXCL>;
            key-positions = <18 25>;
            layers = <0>;
        };

        steno_toggle {
            bindings = <&plover_toggle>;
            key-positions = <21 20 22>;
            layers = <0 1>;
        };

        l_pren {
            bindings = <&kp LPAR>;
            key-positions = <16 6>;
            layers = <0>;
        };

        r_paren {
            bindings = <&kp RPAR>;
            key-positions = <7 17>;
            layers = <0>;
        };
    };

    macros {
        const: const {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp N &kp S &kp T &kp SPACE>;
            label = "CONST";
        };

        you: of {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp O &kp U>;
            label = "OF";
        };

        and: and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp N &kp D>;
            label = "AND";
        };

        key: key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K &kp E &kp Y>;
            label = "KEY";
        };

        fun: fun {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp U &kp N &kp C &kp T &kp I &kp O &kp N>;
            label = "FUN";
        };

        return: return {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE>;
            label = "RETURN";
        };

        value: value {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp A &kp L &kp U &kp E>;
            label = "VALUE";
        };

        home_dir: home_dir {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp FSLH>;
            label = "HOME_DIR";
        };

        s_neq: s_neq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL &kp EQUAL>;
            label = "S_NEQ";
        };

        less: less {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LT";
        };

        gt: gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp EQUAL>;
            label = "GT";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "ARROW";
        };

        s_eq: s_eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL &kp EQUAL>;
            label = "S_EQ";
        };

        export: export {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp X &kp P &kp O &kp R &kp T &kp SPACE>;
            label = "EXPORT";
        };

        last_dir: last_dir {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp FSLH>;
            label = "LAST_DIR";
        };

        str: str {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&swap_quote &swap_quote &kp LEFT>;
            label = "STR";
        };

        true: true {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp R &kp U &kp E>;
            label = "TRUE";
        };

        false: false {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp A &kp L &kp S &kp E>;
            label = "FALSE";
        };

        default: default {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp E &kp F &kp A &kp U &kp L &kp T &kp SPACE>;
            label = "DEFAULT";
        };

        import: import {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp M &kp P &kp O &kp R &kp T &kp SPACE>;
            label = "IMPORT";
        };

        continue: continue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp N &kp T &kp I &kp N &kp U &kp E>;
            label = "CONTINUE";
        };

        stu_id: stu_id {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp N2 &kp N4 &kp N1 &kp N0 &kp N6 &kp N2 &kp N5 &kp N4>;
            label = "STU_ID";
        };

        paren_word: paren_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "PAREN_WORD";
        };

        md_link: md_link {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LPAR &kp RPAR &kp LEFT &kp LEFT &kp LEFT>;
            label = "MD_LINK";
        };

        index_i: index_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp I &kp RIGHT_BRACKET>;
            label = "INDEX_I";
        };

        index_j: index_j {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp J &kp RIGHT_BRACKET>;
            label = "INDEX_J";
        };

        index0: index0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp N0 &kp RIGHT_BRACKET>;
            label = "INDEX0";
        };

        index1: index1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp N1 &kp RIGHT_BRACKET>;
            label = "INDEX1";
        };

        length: length {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp E &kp N &kp G &kp T &kp H>;
            label = "LENGTH";
        };

        index_2: index_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp N2 &kp RIGHT_BRACKET>;
            label = "INDEX_2";
        };

        index_k: index_k {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp K &kp RBKT>;
            label = "INDEX_K";
        };

        sym_or: sym_or {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp PIPE>;
            label = "SYM_OR";
        };

        localhost_url: localhost_url {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp T &kp T &kp P &kp COLON &kp FSLH &kp FSLH &kp L &kp O &kp C &kp A &kp L &kp H &kp O &kp S &kp T &kp COLON>;
            label = "LOCALHOST_URL";
        };

        v_replace: v_replace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp COLON &kp PRCNT &kp S &kp FSLH>;
            label = "V_REPLACE";
        };

        var_text: var_text {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DLLR &kp LBRC &kp RBRC &kp LEFT>;
            label = "VAR_TEXT";
        };

        v_save_exit: v_save_exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp COLON &kp W &kp Q &kp RET>;
            label = "V_SAVE_EXIT";
        };

        bracket_word: bracket_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKET_WORD";
        };

        code_block: code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp ENTER &kp GRAVE &kp GRAVE &kp GRAVE &kp UP &kp ENTER>;
            label = "CODE_BLOCK";
        };

        sql_select_all: sql_select_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp LS(E) &kp LS(L) &kp LS(E) &kp LS(C) &kp LS(T) &kp SPACE &kp STAR &kp SPACE &kp LS(F) &kp LS(R) &kp LS(O) &kp LS(M) &kp SPACE>;
            label = "SQL_SELECT_ALL";
        };

        language_switch: language_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>;
            label = "LANGUAGE_SWITCH";
        };

        plover_toggle: plover_toggle {
            wait-ms = <5>;
            tap-ms = <5>;
            compatible = "zmk,behavior-macro";
            label = "PLOVER";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp E &kp R &kp F &kp V &kp O &kp L>,
                <&macro_release>,
                <&kp E &kp R &kp F &kp V &kp O &kp L>,
                <&macro_tap>,
                <&tog 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp LC(SPACE)  &kp W           &kp F             &mt LG(LSHIFT) P    &kp B              &kp J             &kp L               &kp U               &kp Y           &kp SEMI
&lt 6 A        &mt LC(LWIN) R  &mt LC(LSHIFT) S  &mt LC(LEFT_ALT) T  &lt 5 G            &ctrl_m_to_enter  &mt LC(LEFT_ALT) N  &mt LC(LSHIFT) E    &mt LC(LWIN) I  &lt 7 O
               &mt LCTRL K     &mt LEFT_ALT C    &mt LEFT_WIN D                                           &mt LEFT_GUI H      &mt LEFT_ALT COMMA  &mt LCTRL DOT
                                                 &kp LSHIFT          &lt 3 BACKSPACE    &lt 4 ENTER       &lt 2 SPACE
            >;
        };

        layer_steno {
            bindings = <
&kp Q  &kp W   &kp E  &kp R  &kp T    &kp U  &kp I  &kp O  &kp P     &kp LBKT
&kp A  &kp S   &kp D  &kp F  &kp G    &kp J  &kp K  &kp L  &kp SEMI  &kp APOS
       &trans  &mo 3  &mo 2                  &mo 2  &mo 3  &trans
                      &kp C  &kp V    &kp N  &kp M
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&none       &trans                   &mmv MOVE_UP     &kp LA(TAB)               &none        &none      &kp K_CONTEXT_MENU  &mt PAGE_UP UP      &kp DELETE     &none
&kp ESCAPE  &mmv MOVE_LEFT           &mmv MOVE_DOWN   &mmv MOVE_RIGHT           &trans       &kp ENTER  &mt HOME LEFT       &mt PAGE_DOWN DOWN  &mt END RIGHT  &msc SCRL_RIGHT
            &mt LEFT_CONTROL DELETE  &mt LC(V) LC(C)  &mt PRINTSCREEN CAPSLOCK                          &msc SCRL_LEFT      &msc SCRL_DOWN      &msc SCRL_UP
                                                      &mkp LCLK                 &mkp RCLK    &to 0      &kp ENTER
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans     &kp ASTRK  &kp COMMA  &kp DOT     &none          &none          &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH  &none
&kp TILDE  &kp GRAVE  &kp HASH   &kp EQUAL   &kp PERCENT    &kp BACKSPACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPERSAND  &kp PIPE
           &kp AT     &kp HASH   &kp DOLLAR                                &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp CARET
                                 &trans      &trans         &kp ENTER      &mt LEFT_SHIFT SPACE
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&none        &kp ASTRK    &kp MINUS       &kp PLUS            &none        &none   &kp COLON      &kp SLASH     &trans       &none
&mt LGUI N1  &mt LALT N2  &mt LSHFT N3    &mt LCTRL N4        &kp N5       &kp N6  &mt LCTRL N7   &mt LSHFT N8  &mt LALT N9  &mt LGUI N0
             &kp COLON    &mt PAGE_UP UP  &mt PAGE_DOWN DOWN                       &kp BACKSPACE  &kp COMMA     &kp DOT
                                          &kp SPACE           &kp ENTER    &trans  &trans
            >;
        };

        MEDIA_LAYER {
            bindings = <
&trans        &trans        &trans        &trans        &trans          &trans      &kp C_PREV    &kp C_PP      &kp C_NEXT     &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_DEC  &kp C_BRI_INC
              &trans        &bootloader   &trans                                    &trans        &bootloader   &bt BT_CLR
                                          &trans        &to 0           &trans      &trans
            >;
        };

        shortcut_layer {
            bindings = <
&trans  &trans      &md_link      &paren_word     &trans         &trans  &sql_select_all  &false    &length    &trans
&trans  &stu_id     &index_i_j_k  &index_0_1_2    &code_block    &trans  &export          &default  &fun       &return
        &v_replace  &v_save_exit  &localhost_url                         &import          &value    &continue
                                  &sk LSHIFT      &caps_word     &trans  &trans
            >;
        };

        function_layer {
            bindings = <
&trans          &trans        &trans              &trans         &trans    &trans   &kp F7   &kp F8  &kp F9  &trans
&kp LEFT_SHIFT  &kp LC(LWIN)  &kp LC(LEFT_SHIFT)  &kp LA(LCTRL)  &trans    &kp F10  &kp F4   &kp F5  &kp F6  &none
                &kp LCTRL     &kp LEFT_ALT        &kp LWIN                          &kp F1   &kp F2  &kp F3
                                                  &trans         &trans    &kp F11  &kp F12
            >;
        };
    };
};

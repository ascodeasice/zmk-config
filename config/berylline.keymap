/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Layers */

#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3
#define MED_L 4

/* Shortcuts */

#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define SLALL LC(A)

/* Key Position Groups */

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22  // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 23 24 25  // right-hand keys
#define THUMBS 26 27 28 29                        // thumb keys

/* Mod Tap Parameters */

#define TAPPING_TERM 300
#define TD_TAPPING_TERM 325
#define QUICK_TAP_TERM 175

/* Behavior Settings */

&sk {
    release-after-ms = <250>;
    quick-release;
};

&sl { release-after-ms = <250>; };

&mt {
    tapping-term-ms = <TAPPING_TERM>;
    flavor = "tap-preferred";
    quick-tap-ms = <QUICK_TAP_TERM>;
};

/ {
    behaviors {
        mtl: mod_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            global-quick-tap;
        };

        mtr: mod_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            global-quick-tap;
        };

        f1to4: f1to4 {
            compatible = "zmk,behavior-tap-dance";
            label = "F1TO4";
            #binding-cells = <0>;
            bindings = <&kp F1>, <&kp F2>, <&kp F3>, <&kp F4>;
        };

        f5to8: f5to8 {
            compatible = "zmk,behavior-tap-dance";
            label = "F5TO8";
            #binding-cells = <0>;
            bindings = <&kp F5>, <&kp F6>, <&kp F7>, <&kp F8>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */
        /* Letters */

        v {
            key-positions = <2 3>;
            bindings = <&kp V>;
            layers = <0>;
        };

        q {
            key-positions = <12 11>;
            bindings = <&kp Q>;
            layers = <0>;
        };

        z {
            key-positions = <2 13>;
            bindings = <&kp Z>;
            layers = <0>;
        };

        /* Brackets */
        /* Convenience */

        esc {
            bindings = <&kp ESC>;
            key-positions = <11 13>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <12 22>;
            layers = <0>;
        };

        zero {
            bindings = <&kp N0>;
            key-positions = <20 21>;
            layers = <0>;
            timeout-ms = <30>;
        };

        one {
            bindings = <&kp N1>;
            key-positions = <22 21>;
            layers = <0>;
            timeout-ms = <30>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <12 13>;
            layers = <0>;
            timeout-ms = <35>;
        };

        j {
            bindings = <&kp J>;
            key-positions = <6 7>;
            layers = <0>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <24 25>;
            layers = <0>;
        };

        semicolon {
            bindings = <&kp SEMI>;
            key-positions = <23 25>;
            layers = <0>;
        };

        to_media {
            bindings = <&to 4>;
            key-positions = <1 2 3>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <23 24>;
            layers = <0>;
        };

        quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <17 18>;
            layers = <0>;
            timeout-ms = <25>;
        };

        to_nav {
            bindings = <&to 1>;
            key-positions = <20 21 22>;
            layers = <0>;
        };

        the {
            bindings = <&the>;
            key-positions = <6 16>;
            layers = <0>;
        };

        you {
            bindings = <&you>;
            key-positions = <7 17>;
            layers = <0>;
        };

        and {
            bindings = <&and>;
            key-positions = <8 18>;
            layers = <0>;
        };

        two {
            bindings = <&kp NUMBER_2>;
            key-positions = <20 22>;
            layers = <0>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms = <25>;
        };

        key {
            bindings = <&key>;
            key-positions = <3 13>;
            layers = <0>;
        };

        ctrl_b {
            bindings = <&kp LC(B)>;
            key-positions = <7 8>;
            timeout-ms = <30>;
            layers = <0>;
        };

        home_dir {
            bindings = <&home_dir>;
            key-positions = <1 3>;
            layers = <0>;
        };

        s_eq {
            bindings = <&s_eq>;
            key-positions = <16 18>;
            layers = <0>;
            timeout-ms = <25>;
        };

        s_nq {
            bindings = <&s_neq>;
            key-positions = <8 6>;
            layers = <0>;
            timeout-ms = <30>;
        };

        less {
            bindings = <&less>;
            key-positions = <1 2>;
            layers = <2>;
        };

        gt {
            bindings = <&gt>;
            key-positions = <21 20>;
            layers = <2>;
        };

        arrow {
            bindings = <&arrow>;
            key-positions = <11 12>;
            layers = <2>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <2 12>;
            layers = <0>;
        };
    };

    macros {
        the: the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E>;
            label = "THE";
        };

        you: of {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp O &kp U>;
            label = "OF";
        };

        and: and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp N &kp D>;
            label = "AND";
        };

        key: key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K &kp E &kp Y>;
            label = "KEY";
        };

        fun: fun {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp U &kp N &kp C &kp T &kp I &kp O &kp N &kp SPACE>;
            label = "FUN";
        };

        return: return {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE>;
            label = "RETURN";
        };

        value: value {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp A &kp L &kp U &kp E &kp SPACE>;
            label = "VALUE";
        };

        home_dir: home_dir {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp FSLH>;
            label = "HOME_DIR";
        };

        s_neq: s_neq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL &kp EQUAL>;
            label = "S_NEQ";
        };

        less: less {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LT";
        };

        gt: gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp EQUAL>;
            label = "GT";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "ARROW";
        };

        s_eq: s_eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL &kp EQUAL>;
            label = "S_EQ";
        };

        export: export {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp X &kp P &kp O &kp R &kp T &kp SPACE>;
            label = "EXPORT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none    &kp W           &kp F             &kp P               &trans                 &trans       &mt LC(LA(LEFT)) L  &kp U               &mt LA(LC(RIGHT)) Y  &trans
&lt 5 A  &mt LC(LWIN) R  &mt LC(LSHIFT) S  &mt LC(LEFT_ALT) T  &kp G                  &kp M        &mt LC(LEFT_ALT) N  &mt LC(LSHIFT) E    &mt LC(LWIN) I       &mt LSHIFT O
         &mt LCTRL K     &mt LEFT_ALT C    &mt LEFT_WIN D                                          &mt LEFT_GUI H      &mt LEFT_ALT COMMA  &mt LCTRL DOT
                                           &kp LEFT_SHIFT      &lt 2 LC(BACKSPACE)    &lt 1 ENTER  &lt 3 SPACE
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&none       &kp LA(F4)               &mmv MOVE_UP     &kp LA(TAB)               &none        &none   &kp K_CONTEXT_MENU  &kp UP          &trans        &none
&kp ESCAPE  &mmv MOVE_LEFT           &mmv MOVE_DOWN   &mmv MOVE_RIGHT           &trans       &trans  &kp LEFT            &kp DOWN        &kp RIGHT     &msc SCRL_RIGHT
            &mt LEFT_CONTROL DELETE  &mt LC(V) LC(C)  &mt PRINTSCREEN CAPSLOCK                       &msc SCRL_LEFT      &msc SCRL_DOWN  &msc SCRL_UP
                                                      &mkp LCLK                 &mkp RCLK    &to 0   &kp ENTER
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans    &kp SEMI   &kp ASTRK  &kp COMMA   &none          &none          &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH  &none
&kp EXCL  &kp TILDE  &kp MINUS  &kp EQUAL   &kp PERCENT    &kp BACKSPACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPERSAND  &kp SINGLE_QUOTE
          &kp AT     &kp HASH   &kp DOLLAR                                &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp CARET
                                &trans      &trans         &kp ENTER      &kp SPACE
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&none         &f1to4        &f5to8         &kp F9         &none     &none   &kp F10        &kp F11        &kp F12       &none
&mtl LGUI N1  &mtl LALT N2  &mtl LSHFT N3  &mtl LCTRL N4  &kp N5    &kp N6  &mtr LCTRL N7  &mtr LSHFT N8  &mtr LALT N9  &mtr LGUI N0
              &none         &none          &none                            &none          &none          &none
                                           &trans         &trans    &trans  &trans
            >;
        };

        MEDIA_LAYER {
            bindings = <
&trans        &trans        &trans        &trans        &trans          &trans      &kp K_PREV         &kp K_PLAY_PAUSE  &kp K_NEXT     &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp K_MUTE  &kp K_VOLUME_DOWN  &kp K_VOLUME_UP   &kp C_BRI_DEC  &kp C_BRI_INC
              &bt BT_PRV    &bootloader   &bt BT_NXT                                &trans             &bootloader       &bt BT_CLR
                                          &trans        &to 0           &trans      &trans
            >;
        };

        shortcut_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans   &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &fun    &return  &value  &export
        &trans  &trans  &trans                    &trans  &trans   &trans
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
